# ============================================================================
# Docker Compose Configuration
# Project: Local AI Platform (OpenWebUI, Searxng, LiteLLM, Postgres, n8n, Ollama, etc.)
# Author: Erik van Busschbach
# Last updated: 2025-08-11
# Version: 250811v7-DRY
# Description:
#   - Defines Docker services for the Local AI platform.
#   - Uses DRY principles for environment variable management.
#   - Secure DB initialization and environment variable passing.
#   - Modular and easy to extend with clean logs and health checks.
#   - Named volumes for persistent data storage.
#   - Includes (init and .env fixes)
# ============================================================================

volumes:
  openwebui_:
  searxng_:
  litellm_:
  postgres_:
  redis_:

networks:
  ai_network:

x-service-defaults: &defaults
  restart: unless-stopped
  networks:
    - ai_network

services:

  # --- OpenWebUI frontend ---
  open-webui:
    image: ghcr.io/open-webui/open-webui:latest
    environment:
      - ENABLE_RAG_WEB_SEARCH=true
      - RAG_WEB_SEARCH_ENGINE=searxng
      - RAG_WEB_SEARCH_RESULT_COUNT=3
      - SEARXNG_QUERY_URL=http://searxng:8080/search
    ports:
      - "${OPENWEBUI_PORT}:8080"
    volumes:
      - ./openwebui/admin_config:/app/config/admin:rw
      - ./openwebui/user_config:/app/config/user:rw
      - openwebui_:/app/backend:rw
    depends_on:
      - searxng
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: *defaults

  # --- SearxNG meta search engine ---
  searxng:
    image: searxng/searxng:latest
    ports:
      - "${SEARXNG_PORT}:8080"
    environment:
      - SEARXNG_BIND_ADDRESS=0.0.0.0:8080
      - SEARXNG_BASE_URL=http://localhost:${SEARXNG_PORT}/
      - SEARXNG_LIMITER=false
    volumes:
      - ./searxng/admin_config:/etc/searxng/admin:rw
      - ./searxng/user_config:/etc/searxng/user:rw
      - searxng_:/var/lib/searxng:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: *defaults

  # --- PostgreSQL database ---
  postgres:
    image: postgres:15-alpine
    environment:
      # Gebruik aliasen volgens .env om consistentie te garanderen
      - POSTGRES_USER=${POSTGRES_SUPERUSER}    # pgadmin
      - POSTGRES_PASSWORD=${POSTGRES_SUPERPASS} # postgres-secure-pass-2025
      - POSTGRES_DB=${POSTGRES_DB}             # postgres
      - APP_DATABASES=${APP_DATABASES}         # composiet db info voor init script
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_:/var/lib/postgresql/rw
      - ./postgres/admin_scripts:/docker-entrypoint-initdb.d:rw
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_SUPERUSER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    <<: *defaults

  # --- LiteLLM API proxy ---
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    ports:
      - "${LITELLM_PORT}:4000"
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      LITELLM_DATABASE_URL: ${LITELLM_DATABASE_URL}
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY}
      LITELLM_SALT_KEY: ${LITELLM_SALT_KEY}
      STORE_MODEL_IN_DB: ${STORE_MODEL_IN_DB}
      LITELLM_LOG: ${LITELLM_LOG}
      APP_DATABASES: ${APP_DATABASES}
    volumes:
      - ./litellm/admin_config:/app/config/admin:rw
      - ./litellm/user_config:/app/config/user:rw
      - litellm_:/app/rw
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    <<: *defaults

  # --- Redis cache (optioneel) ---
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_:/rw
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    <<: *defaults
